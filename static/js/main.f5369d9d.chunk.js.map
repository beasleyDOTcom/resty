{"version":3,"sources":["components/Header/header.js","components/Footer/footer.js","components/Form/form.js","components/contentArea/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Form","props","handleSubmit","event","a","preventDefault","fetch","state","url","WWEraw","json","data","headers","forEach","val","key","handleClick","count","results","handleURL","target","value","setState","handleMethod","method","text","onChange","this","onClick","prompt","type","id","name","checked","htmlFor","React","Component","src","App","toggleLoading","loading","submitHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5369d9d.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss'\n\nfunction Header(){\n    return (\n        <header className=\"header\">\n            <h1>ReSTy</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './footer.scss';\n\n\nfunction Footer (){\n    return (\n        <footer className='footer'>\n            &copy; 2020 beasleydotcom\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport '../contentArea/Results.scss';\n\nclass Form extends React.Component{\n  \n    constructor(props){\n        super(props);\n        this.state = {\n            text: 'po po she show',\n            url: '',\n            method: 'get',\n        };\n    }\n    \n    handleSubmit = async event =>{\n        event.preventDefault();\n        // this.props.toggleLoading();\n\n        let WWEraw = await fetch(this.state.url);\n        let data = await WWEraw.json();\n        let headers = {};\n        WWEraw.headers.forEach((val, key)=> headers[key] = val)\n\n        //https://swapi.dev/api/people/\n\n        this.props.handleClick(data.count, data.results, headers);\n    }\n\n    handleURL = event => {\n        let url = event.target.value;\n        this.setState({url})\n    }\n\n    handleMethod = event =>{\n        let method = event.target.value;\n        this.setState({method});\n    }\n\n    render(){\n        return (\n            <div className=\"FORM\">\n                <div>\n                    <input onChange = {this.handleURL}/>\n                    <button onClick={this.handleSubmit}>{this.props.prompt}</button>\n                </div>\n                <div>\n                    <input onChange = {this.handleMethod} type = \"radio\" id=\"get\" name =\"method\" value=\"get\" checked/>\n                    <label htmlFor=\"get\">GET</label>\n                    <input  onChange = {this.handleMethod} type = \"radio\" id=\"post\" name=\"method\" value = \"post\"/>\n                    <label htmlFor=\"post\">POST</label>\n                    <input onChange = {this.handleMethod}  type = \"radio\" id=\"put\" name =\"method\" value=\"put\"/>\n                    <label htmlFor=\"put\">PUT</label>\n                    <input  onChange = {this.handleMethod} type = \"radio\" id=\"delete\" name =\"method\" value=\"delete\"/>\n                    <label htmlFor=\"delete\">DELETE</label>\n                </div>\n                <section className=\"Content\">\n                    <text-area>{this.state.method +'   '+ this.state.url}</text-area>\n                </section>\n            </div>\n          \n        )\n    }\n\n}\n\nexport default Form;","import React from 'react';\nimport './Results.scss';\nimport ReactJson from 'react-json-view';\nexport default function (props){\n    return (\n        <section className=\"Content\">\n            <h1> Results From API:</h1>\n            <h3>Count: {props.count}</h3>\n            <h1> Headers: <ReactJson src={props.headers}/></h1>\n            <h1>Results:</h1>\n        < ReactJson src={props.results}/>\n            {/* <ReactJson src={props.results}/> */}\n            {/* <p>Results: {JSON.stringify(props.results)}</p> */}\n        </section>\n    )\n}\n","import React from 'react';\nimport './components/Form/Form.scss';\nimport Header from './components/Header/header.js';\nimport Footer from './components/Footer/footer.js';\nimport Form from './components/Form/form.js';\nimport Results from './components/contentArea/Results.js'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      loading: false,\n      count:0,\n      results: [],\n      headers:{},\n    }\n  }\n// popo\n  toggleLoading = () =>{\n    this.setState({loading: !this.state.loading});\n  }\n\n  submitHandler = (count, results, headers) => {\n    this.setState({count, results, headers});\n  }\n\n  render(){ \n    return (\n    <div className=\"Form\">\n      <Header/>\n      <Form prompt=\"GO\" handleClick={this.submitHandler}/>\n      <Results count={this.state.count} results={this.state.results} headers={this.state.headers}/>\n      <Footer/>\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}